/**
 * Author - Kaushik Thirthappa (thirthappa.kaushik@gmail.com)
 */

(function ($, global) {

    'use strict';

    global.Editor = function (opts) {
        this.$editor = $('#' + opts.id);
        this.editor = document.getElementById(opts.id);
        this.setConfig();
        this.addEditorElements();
        this.bindEvents();
    }

    var Editor = global.Editor

    Editor.prototype.setConfig = function () {
        this.config = EditorConfig;
    }

    Editor.prototype.addEditorElements = function () {
        this.createPlaceholder();
        this.createSelektorBlock();
    }

    Editor.prototype.bindEvents = function () {
        // Remove the placeholder
        var _this = this;

        this.editor.addEventListener('keydown', function (event) {
            _this.removePlaceholder();
        })

        this.editor.addEventListener('keyup', function (event) {
            _this.keyUpListener();
        })

        this.bold.addEventListener('click', function (event) {
            _this.execBold(event);
        })

        this.italic.addEventListener('click', function (event) {
            _this.execItalic(event);
        })

        // event.preventDefault();
    }

    Editor.prototype.removePlaceholder = function () {
        this.placeholder.remove();
    }

    Editor.prototype.keyUpListener = function () {
        var key = event.keyCode || event.which;

        // hide the optionsToolbar and also perform the transition here thus trigerring click
        // if (!$optionsToolbar.hasClass('hide')) {
        //     $multiOptionsBlock.trigger('click');
        // }

        // detect the selection - this seems like an overkill to check each time
        // - check the next comment for more info
        this.workOnSelection();

        // the only reason we are not using this is because this won't work on Mac. Unable to find Cmd + A for some reason
        /**
           if (
                key === 16 || Checks for Enter key press
                (event.shiftKey && (key > 36) && (key < 41)) ||  Checks for Shift key press and arrow buttons press
                (event.ctrlKey && (key === 65))) { // Checks for Ctrl + a/A
            } else {
                removeSelection();
            }
        */

        // get the html element from the selection
        var node = Util.getSelectionStart();

        // only display the + icon if there are less than 10 elements typed
        // if the user has continued typing more than 10 then we can hide it condsidering the 
        // the user will not use it

        // if the user wishes to then he/she can click to make it appear
        // if (node) {

        //     if (node.textContent.trim().length < 10) {

        //         // var offsetNode = Util.findPos(node)
        //         //   , offsetEditor = Util.findPos(EDITOR);

        //         // $multiOptionsBlock.removeClass('hide');
        //         // $multiOptionsBlock.css({ 
        //         //     top: offsetNode.top - 5, 
        //         //     left: offsetEditor.left - 20
        //         // })

        //         // move the options toolbar along side the + icon
        //         // $optionsToolbar.css({ 
        //         //     top: offsetNode.top - 5, 
        //         //     left: offsetEditor.left + 20
        //         // })

        //     } else {
        //         // hide the + icon
        //         // $multiOptionsBlock.addClass('hide');
        //     }
        // }
    }

    Editor.prototype.workOnSelection = function () {
        if (window.getSelection) {
            if (!window.getSelection().isCollapsed) {

                var offets = Util.getSelectionCoords();

                if (offets) {
                    this.selektorBlock.classList.remove('hide');
                    this.selektorBlock.style.top = offets.top - 30 + 'px'; // type conversion
                    this.selektorBlock.style.left = offets.left + 'px';
                }
                return;
            } 
        }
        this.removeSelection();
    }

    Editor.prototype.removeSelection = function () {
        this.selektorBlock.classList.add('hide');
    }

    Editor.prototype.execBold = function (event) {
        event.preventDefault();
        document.execCommand('bold');
    }

    Editor.prototype.execItalic = function (event) {
        event.preventDefault();
        document.execCommand('italic');
    }

    Editor.prototype.selection = function () {

    }


})(jQuery, this);